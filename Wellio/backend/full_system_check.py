import json
import os
from typing import Dict, Tuple

import requests
from dotenv import load_dotenv

from utils.ai_voice import analyze_with_gemini, list_gemini_models, synthesize_voice

print("ü©∫ Running Wellio Full System Health Check...\n")

# --- 1Ô∏è‚É£ Load environment variables ---
load_dotenv()
api_key = os.getenv("GEMINI_API_KEY")
mongo_uri = os.getenv("MONGO_URI")

print("üîπ Environment Check:")
print(f"   GEMINI_API_KEY: {'‚úÖ Found' if api_key else '‚ùå Missing'}")
print(f"   MONGO_URI: {'‚úÖ Found' if mongo_uri else '‚ùå Missing'}\n")

# --- 2Ô∏è‚É£ Gemini API connectivity ---
gemini_ok = False
if api_key:
    from google.generativeai import configure

    try:
        configure(api_key=api_key)
        models = list_gemini_models()
        sample_message = analyze_with_gemini({"status": "health check"})
        if models or sample_message:
            gemini_ok = True
        print("üîπ Gemini Connection: ‚úÖ Working" if gemini_ok else "üîπ Gemini Connection: ‚ö†Ô∏è Limited")
        print("   Available Models:")
        print(json.dumps(models, indent=2))
    except Exception as exc:
        print("üîπ Gemini Connection: ‚ùå Failed")
        print("   Error:", exc)
else:
    print("üîπ Gemini Connection: ‚ùå Missing API key; skipped")

# --- 3Ô∏è‚É£ Flask endpoints test ---
print("\nüîπ Flask Route Checks:")
route_statuses: Dict[str, Tuple[bool, str]] = {}
routes = [("/", "Root"), ("/fetch_data", "Fetch Data"), ("/test_gemini", "Gemini Test")]
for route, name in routes:
    try:
        response = requests.get(f"http://127.0.0.1:5000{route}", timeout=10)
        ok = response.status_code == 200
        route_statuses[route] = (ok, str(response.status_code))
        status_icon = "‚úÖ" if ok else "‚ö†Ô∏è"
        print(f"   {status_icon} {name} [{route}] -> {response.status_code}")
    except Exception as exc:
        route_statuses[route] = (False, str(exc))
        print(f"   ‚ùå {name} [{route}] -> Error: {exc}")

# --- 4Ô∏è‚É£ gTTS Audio Generation Check ---
print("\nüîπ Voice (gTTS) Generation Test:")
voice_ok = False
try:
    filename = synthesize_voice("This is a Wellio system voice check.")
    if filename:
        voice_ok = True
        print(f"   ‚úÖ Voice generated successfully: {filename}")
    else:
        print("   ‚ö†Ô∏è Voice generation skipped (no audio produced).")
except Exception as exc:
    print("   ‚ùå Voice generation failed:", exc)

# --- 5Ô∏è‚É£ MongoDB Connection ---
print("\nüîπ MongoDB Connection Check:")
mongo_ok = False
try:
    from pymongo import MongoClient

    client = MongoClient(mongo_uri, serverSelectionTimeoutMS=3000)
    client.server_info()
    mongo_ok = True
    print("   ‚úÖ Connected to MongoDB")
except Exception as exc:
    print("   ‚ùå MongoDB connection failed:", exc)

# --- 6Ô∏è‚É£ Static folder check ---
static_ok = os.path.exists("static/audio")
print("\nüîπ Static File Directory:")
print("   static/audio exists ->", "‚úÖ Yes" if static_ok else "‚ùå No")

if (
    gemini_ok
    and voice_ok
    and mongo_ok
    and all(status for status, _ in route_statuses.values())
    and static_ok
):
    print("\n‚úÖ Wellio backend fully updated to Gemini 2.5 and functioning correctly")
else:
    print("\n‚ö†Ô∏è Wellio backend check completed with issues. Review logs above.")
